#!/bin/sh
#
# Generate Git config
#

DOTFILES=${1:-${HOME}/.config/dotfiles}
GIT_CONFIG_FILE=${2:-${HOME}/.gitconfig}
GIT_CONFIG_CMD="git config --file ${GIT_CONFIG_FILE}"

gc_set() {
	${GIT_CONFIG_CMD} "${1}" "${2}"
}

gc_unset() {
	${GIT_CONFIG_CMD} --unset "${1}"
}

gc_update() {
	gc_unset "${1}"
	if [ -n "${2}" ]; then
		gc_set "${1}" "${2}"
	fi
}

# Prompt for git config key
gc_prompt() {
	local current="$(${GIT_CONFIG_CMD} --get ${1})"
	read -p "${1} (${current}): " input
	gc_update ${1} "${input:-${current}}"
}

echo "Generating gitconfig..."
touch ${GIT_CONFIG_FILE}

# Include defaults and aliases
gc_set include.path ${DOTFILES}/gitconfig

# User info
gc_prompt user.name "User name"
gc_prompt user.email "Email"

# Set configuration by platform
case $(uname) in
Darwin )
	gc_set credential.helper osxkeychain

	# BBEdit diff
	if command -v bbdiff &>/dev/null; then
		gc_set difftool."bbdiff".cmd 'bbdiff --wait --resume $LOCAL $REMOTE'
	fi

	# Kaleidoscope
	if command -v ksdiff &>/dev/null; then
		gc_set difftool."Kaleidoscope".cmd 'ksdiff --partial-changeset --relative-path $MERGED -- $LOCAL $REMOTE'
		gc_set mergetool."Kaleidoscope".cmd 'ksdiff --merge --output $MERGED --base $BASE -- $LOCAL --snapshot $REMOTE --snapshot'
		gc_set mergetool."Kaleidoscope".trustExitCode true
	fi

	# Use opendiff as default diff/merge
	gc_set diff.tool opendiff
	gc_set merge.tool opendiff

	# Use fork for visual
	gc_set alias.visual '!fork $(git root)'
	;;
Linux )
	# Check for WSL
	if [ -n "${WSL_DISTRO_NAME}" ]; then
		# Use Windows credential manager if running in WSL
		gc_set credential.helper "/mnt/c/Program\ Files/Git/mingw64/libexec/git-core/git-credential-manager-core.exe"

		# Use Fork for visual
		gc_set alias.visual '!Fork.exe $(wslpath -w $(git root))'
	else
		gc_set credential.helper cache
	fi

	# Use Vim as default diff/merge
	gc_set diff.tool vimdiff
	gc_set merge.tool vimdiff
	;;
esac
