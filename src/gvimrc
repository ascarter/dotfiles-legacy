" Set standard starting window size
if &diff
  set lines=40 columns=160
else
  set lines=40 columns=100
endif

colorscheme github
set background=light

if has("gui_gtk2")
  " runtime mswin.vim
  " set guifont=Monospace\ 10
  set guifont=Source\ Code\ Pro\ Medium\ 12
  " set guioptions=egmrLT
elseif has("gui_macvim")
  set guifont=Source\ Code\ Pro\ Medium:h12
  " set guioptions=egmrLt
  set transparency=0
  au FocusLost * set transp=5
  au FocusGained * set transp=0

  " Fullscreen takes up entire screen
  " set fuoptions=maxhorz,maxvert

  " cmd+return for fullscreen
  macmenu Window.Toggle\ Full\ Screen\ Mode key=<D-CR>

  " cmd+shift+f for Ack
  map <D-F> :Ack<space>

  " cmd-[/] to increase/decrease indentation
  vmap <D-]> >gv
  vmap <D-[> <gv
  map <D-]> >>
  map <D-[> <<

  " Map Command-# to switch tabs
  map  <D-0> 0gt
  imap <D-0> <Esc>0gt
  map  <D-1> 1gt
  imap <D-1> <Esc>1gt
  map  <D-2> 2gt
  imap <D-2> <Esc>2gt
  map  <D-3> 3gt
  imap <D-3> <Esc>3gt
  map  <D-4> 4gt
  imap <D-4> <Esc>4gt
  map  <D-5> 5gt
  imap <D-5> <Esc>5gt
  map  <D-6> 6gt
  imap <D-6> <Esc>6gt
  map  <D-7> 7gt
  imap <D-7> <Esc>7gt
  map  <D-8> 8gt
  imap <D-8> <Esc>8gt
  map  <D-9> 9gt
  imap <D-9> <Esc>9gt

  " Command-Option-ArrowKey to switch viewports
  map <D-M-Up> <C-w>k
  imap <D-M-Up> <Esc> <C-w>k
  map <D-M-Down> <C-w>j
  imap <D-M-Down> <Esc> <C-w>j
  map <D-M-Right> <C-w>l
  imap <D-M-Right> <Esc> <C-w>l
  map <D-M-Left> <C-w>h
  imap <D-M-Left> <C-w>h
elseif has("gui_win32")
  set guifont=Source\ Code\ Pro:h12,Consolas:h11,Lucida\ Console:h12
endif

" Adjust viewports to the same size
map <Leader>= <C-w>=
imap <Leader>= <Esc> <C-w>=

" Turn off toolbar
set guioptions-=T
map <silent> <C-F1> :call ToggleGuiOption("T")<CR>

"
" FUNCTIONS
"

function ToggleGuiOption(option)
    " If a:option is already set in guioptions, then we want to remove it
    if match(&guioptions, "\\C" . a:option) > -1
	exec "set guioptions-=" . a:option
    else
	exec "set guioptions+=" . a:option
    endif
endfunction

function! FoldBalloon()
  let foldStart = foldclosed(v:beval_lnum)
  let foldEnd = foldclosedend(v:beval_lnum)
  let lines = []

  " Detect if in a fold
  if foldStart > 0
    let numLines = foldEnd - foldStart + 1
    if (numLines > 31)
      let lines = getline(foldStart, foldStart + 14)
      let lines += [ '...' ]
      let lines += getline(foldEnd - 14, foldEnd)
    else
      let lines = getline(foldStart, foldEnd)
    endif
  endif

  return join(lines, has("balloon_multiline") ? "\n" : " ")
endfunction

