#  -*- mode: unix-shell-script; -*-

# ========================================
# Path settings
# ========================================

# Add home bin dir if it is there
if [ -d ~/.bin ]; then
	export PATH=~/.bin:${PATH}
fi

# ========================================
# Languages/frameworks
# ========================================

# Homebrew
if which brew &>/dev/null; then
    BREW_PREFIX=`brew --prefix`
	export HOMEBREW_NO_EMOJI=1
	export HOMEBREW_NO_ANALYTICS=1
	
	# Extend gcc library/include paths to homebrew
# 	if [ -d ${BREW_PREFIX}/lib ]; then
#     	export LIBRARY_PATH=${BREW_PREFIX}/lib
#     fi
#     if [ -d ${BREW_PREFIX}/include ]; then
#     	export C_INCLUDE_PATH=${BREW_PREFIX}/include
# 	    export CPLUS_INCLUDE_PATH=${BREW_PREFIX}/include
# 	    export OBJC_INCLUDE_PATH=${BREW_PREFIX}/include
#     fi
fi

# Go
if [ -d ~/.go ]; then
	export GOPATH=~/.go
	export PATH=$PATH:${GOPATH//://bin:}/bin
fi

if [ -d ~/.gows ]; then
    source ~/.gows/gows
fi

# Ruby (rbenv)
if [ -d ~/.rbenv ]; then
	export PATH=~/.rbenv/bin:${PATH}
	eval "$(rbenv init -)"
fi

# Add local bin directory for Ruby/Bundler
# export PATH=./bin:${PATH}

# Python
export WORKON_HOME=$HOME/.virtualenvs
if [[ -e /usr/local/bin/virtualenvwrapper.sh ]]; then
  . /usr/local/bin/virtualenvwrapper.sh
fi

# Java
if [[ -e /usr/libexec/java_home ]]; then
	# Verify that java is installed
	/usr/libexec/java_home > /dev/null 2>&1
	if [[ $? -eq 0 ]]; then
		# Java installed - use the default JDK
		export JAVA_HOME=`/usr/libexec/java_home`
	fi
else
    export JAVA_HOME=$(readlink -f `which java` | sed "s:bin/java::")
fi

# Android
if [ -d ~/Library/Android/sdk ]; then
    export ANDROID_HOME=~/Library/Android/sdk
	export PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools
fi

# ========================================
# Applications/services
# ========================================

# GitHub
if which hub &>/dev/null; then
	export GITHUB_USER=ascarter
	eval "$(hub alias -s)"
fi

# PostgreSQL
if [ -d /Applications/Postgres.app ]; then
	export PATH=$PATH:/Applications/Postgres.app/Contents/Versions/latest/bin
fi

# Heroku Toolbelt
if [ -d /usr/local/heroku ]; then
	export PATH="/usr/local/heroku/bin:$PATH"
fi

# ========================================
# Shell functions
# ========================================

# Display current battery charge
batterycharge () { echo `python ~/.bin/batterycharge.py $*` 2>/dev/null ; }

# If the bb command is called without an argument, launch BBEdit
# If bb is passed a directory, cd to it and open it in BBEdit
# If bb is passed a file, open it in BBEdit
bb () {
    if [[ -z "$1" ]]; then
        bbedit --launch
    else
        bbedit "$1"
        if [[ -d "$1" ]]; then
            cd "$1"
        fi
    fi
}

# Open URL source in BBEdit
bbcurl () { curl $1 | bbedit --new-window +1 -t $1 ; }

# Run build tool command and send results to bbresults
# Captures stderr to stdin
# Expects results in following format:
#    [error|warning|note]:[file]:[line]:(col):(message)
bbmake () { ($* 2>&1) | bbresults -v -t "$*" ; }

# Run command and send results to new BBEdit window
bbrun () { ($* 2>&1) | bbedit --new-window +1 -t "$*" ; }

# Open query in dash
dashq () {
	if [ "${2}" ]; then
        open dash://${1}:${2}
    else
        open dash://${1}
    fi
}

# Fix open with list in Finder
fixow () {
  /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -kill -r -domain local -domain user
  killall Finder
  echo "Open With has been rebuilt, Finder will relaunch"
}

# Open gem doc page
gemdoc () { open "http://localhost:8808/rdoc?q=$1" ; }

# Set JVM
set_jvm () {
	export JAVA_HOME=`/usr/libexec/java_home -v $1`
	java -version
}
java6 () { set_jvm 1.6 ; }
java7 () { set_jvm 1.7 ; }
java8 () { set_jvm 1.8 ; }

# Mail file as attachment: <filepath> <subject> <recipient>
mailattach () { uuencode ${1} `basename $1` | mail -s "${2}" ${3} ; }

# Open man page with default x-man handler
# On Mac OS X, opens a nice terminal window
manx () {
    if [ "${2}" ]; then
        open x-man-page://${1}/${2}
    else
    	open x-man-page://${1}
    fi
}

# Open man page as PDF
# On Mac OS X, uses Preview.app
pman () { man -t ${@} | open -f -a /Applications/Preview.app ; }

# Output colors: http://linuxtidbits.wordpress.com/2008/08/11/output-color-on-bash-scripts/
output_colors () {
	for i in $(seq 0 $(tput colors)); do
		echo " $(tput setaf $i)Text$(tput sgr0) $(tput bold)$(tput setaf $i)Text$(tput sgr0) $(tput sgr 0 1)$(tput setaf $i)Text$(tput sgr0)  \$(tput setaf $i)"
	done
}

# Switch to project home
project () { cd ~/Developer/Projects/${1} ; }

# Set tab name
tabname () { printf "\e]1;${1}\a" ; }

# Set window title
winname () { printf "\e]2;${1}\a" ; }

# Search up path until target directory is found
upsearch () {                                                               
	local P=$(pwd)
	while [[ "$P" != "" && ! -e "$P/$1" ]]; do
		P=${P%/*}
	done
	echo "$P"
}

# Source bash functions
for f in ~/.bash_functions/*; do
	. ${f}
done

# ========================================
# Shell preferences
# ========================================

# Editor
if [ -e /usr/local/bin/bbedit ]; then
    # bbedit
    export GIT_EDITOR="bbedit -w"
    export SVN_EDITOR="bbedit -w"
    export EDITOR="bbedit -w"
    export VISUAL="bbedit"
    export LESSEDIT='bbedit -l %lm %f'
    export TEXEDIT='bbedit -w -l %d "%s"'
else
    # vim
    export EDITOR="mvim"
    export GIT_EDITOR="${EDITOR} --nofork"
    export SVN_EDITOR="${EDITOR} --nofork"
    export VISUAL="mvim"
    export LESSEDIT='vim ?lm+%lm. %f'
    export TEXEDIT='vim +%d %s'
fi

# less
export PAGER=less
export LESS="--status-column --long-prompt --no-init --quit-if-one-screen --quit-at-eof -R"

# Command history
# bind '"[A":history-search-backward'
# bind '"[B":history-search-forward'

# ========================================
# Terminal settings
# ========================================

# Set Git PS conditions
export GIT_PS1_SHOWDIRTYSTATE=1
export GIT_PS1_SHOWSTASHSTATE=1
export GIT_PS1_SHOWUNTRACKEDFILES=1
export GIT_PS1_SHOWUPSTREAM="auto"

# Docker
# PS1='[\u@\h \W$(__docker_machine_ps1 " [%s]")]\$ '

# Prompt
prompt_command () {
	case $(uname) in
	Darwin )
		# Identify the directory using a "file:" scheme URL, including the host name to
		# disambiguate local vs. remote connections. Percent-escape spaces.
		printf '\e]7;%s\a' "file://$HOST${PWD//' '/%20}"
		;;
	Linux )
		# TODO: Update title
	esac

	if [[ ${BASH_VERSINFO[0]} -lt 4 ]]; then
		PROMPT_DIR="\W"
	else
		PROMPT_DIR="\w"
	fi
	
	if [ $TERM = "xterm-256color" -o $TERM = "xterm-color" -o $TERM = "dtterm" -o $TERM = "linux" ]; then
		export CLICOLOR=1
		export GIT_PS1_SHOWCOLORHINTS=1
		__git_ps1 "$(tput bold)\n\u@\h$(tput sgr0):${PROMPT_DIR}" "\n\\\$ "
	else
		__git_ps1 "\n\u@\h$:${PROMPT_DIR}" "\n\\\$ "
	fi


}

PS1='\n\u@\h:\W\n\$ '
PROMPT_COMMAND=prompt_command

# Limit paths to 3 levels (Bash version 4+)
export PROMPT_DIRTRIM=3

if which dircolors &>/dev/null; then
    if [ -e ~/.dircolors ]; then
        eval `dircolors ~/.dircolors`
    fi
else
	terminal_theme dark
    
    # Set directory colors
    # man ls -> find LSCOLORS

    # Default (light terminal)
    # export LSCOLORS=exfxcxdxbxegedabagacad

    # Dark terminal
    # export LSCOLORS=gxfxcxdxbxegedabagacad

    # Daring Fireball terminal
    # export LSCOLORS=CxGxcxdxBxegedabagacad
fi

# ========================================
# Aliases
# ========================================

case $(uname) in
Darwin )
	# ls
	alias ls='ls -hFGH'
	alias ll='ls -l'
	alias la='ls -a'
	
	# System shortcuts
	alias lockscreen='/System/Library/CoreServices/"Menu Extras"/User.menu/Contents/Resources/CGSession -suspend'
	
	# System information
	alias about='system_profiler SPHardwareDataType SPStorageDataType'
	alias aboutsys='system_profiler SPSoftwareDataType'
	# Use sw_vers for version
	alias sysver='sw_vers'
	
	# Airport utility
	alias airport=/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport

	# Power managment
	alias sleepnow='pmset sleepnow'
	alias batterycapacity='ioreg -w0 -c AppleSmartBattery -b -f | grep -i capacity'

	# QuickLook
	alias ql='qlmanage -p "$@" >& /dev/null'

	# BBEdit
	alias bbctags='/Applications/BBEdit.app/Contents/Helpers/ctags'
	alias bbd=bbdiff
	alias bbnw='bbedit --new-window'
	alias bbpb='pbpaste | bbedit --clean --view-top'
	alias bbtags='bbedit --maketags'

	# Dev tools
    alias gtower='gittower $(P=$(pwd); while [[ "$P" != "" && ! -e "$P/.git" ]]; do P=${P%/*}; done; echo "$P")'
	alias extags='/opt/homebrew/bin/ctags'
	alias eclipse='open /Developer/Applications/Eclipse.app'
	alias vmrun='/Applications/VMware\ Fusion.app/Contents/Library/vmrun'
	alias terminal-notifier='/Applications/terminal-notifier.app/Contents/MacOS/terminal-notifier'
	alias verifyxcode='spctl --assess --verbose /Applications/Xcode.app'
	
	# Java
	alias java_home='/usr/libexec/java_home'

	# Use MacVim on Mac OS X if installed
	if [ -e /usr/local/bin/vim ]; then
			alias vim='/usr/local/bin/vim'
	fi
	;;
Linux )
	alias ls='ls -hFH --color=auto'
	alias la='ls -A'
	alias ll='ls -l'
	
	alias glock='gnome-screensaver-command --lock'
	alias xlock='xscreensaver-command -lock'
	;;
esac

# refresh shell
alias reload='source ~/.profile'

# up 'n' folders
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

alias filetree="ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/ /' -e 's/-/|/'"

# Search/grep
alias devgrep="grep -n -r --exclude='.svn' --exclude='*.swp' --exclude='.git'"

# ip list
alias ip='ifconfig | grep "inet " | grep -v 127.0.0.1 | cut -d " " -f2'
# verbose ip list
alias ipv="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"
# external ip
alias wanip="dig +short myip.opendns.com @resolver1.opendns.com"

# Docker
# Remove stopped containers
alias dockerrms='docker rm $(docker ps -a -q)'
# Remove all untagged images
alias dockerrmi='docker rmi $(docker images | grep "^<none>" | awk "{print $3}")'
# Connect shell to default machine
alias dockerdefault='eval "$(docker-machine env default)"'

# Go
alias gopresent='present -play=true &; open -g http://127.0.0.1:3999; fg'

# Ruby
alias binit="bundle install --path vendor/bundle"
alias bstubs="bundle install --binstubs"
alias bexec="bundle exec"
alias bignore="echo \".bundle\nvendor/bundle/ruby\n\" >> .gitignore"
alias gman="gem man -s"

# Python
alias rmpyc='find . -type f -name \*.pyc -print | xargs rm'
alias pydocv='python -m pydoc'
alias editvenv='bbedit --new-window ${VIRTUAL_ENV}'
alias pipbrew='CFLAGS="-I/opt/homebrew/include -L/opt/homebrew/lib" pip'
alias pdb='python -m pdb'
alias pyunittest='python -m unittest discover --buffer'

# Subverison
alias svnfmdiff='svn diff --diff-cmd /usr/local/bin/fmdiff'
alias svnfmmerge='svn merge --diff3-cmd /usr/local/bin/fmdiff3'
alias svnfmup='svn update --diff3-cmd /usr/local/bin/fmdiff3'
alias svnbbdiff='svn diff --diff-cmd bbdiff --extensions "--resume --wait --reverse"'
alias svnbbmerge='svn merge --diff3-cmd bbdiff'
alias svnbbup='svn update --diff3-cmd bbdiff'

# Shortcuts
alias projects='cd ~/Projects'

# Ski
alias whistlertom='curl -o ~/Documents/whistler_tom.pdf -L "http://online.whistlerblackcomb.com/TomPDF/Default.aspx?Season=1&Type=bg" && ql ~/Documents/whistler_tom.pdf'

# ========================================
# Bash completions
# ========================================

# Homebrew - will also call user's ~/.bash_completion too
if [ -n "`which brew`" ]; then
    if [ -f `brew --prefix`/etc/bash_completion ]; then
        . `brew --prefix`/etc/bash_completion
    fi
    
    if [ -e `brew --prefix`/bin/aws_completer ]; then
	    complete -C aws_completer aws
    fi
fi

# Source any user bash completion scripts
if [ -d ~/.bash_completion.d ]; then
    for f in ~/.bash_completion.d/*
    do
        source ${f}
    done
fi

# Pip
# if [ -n "`which pip`" ]; then
# 	eval "`pip completion --bash`"
# fi

# npm
# if [ -n "`which npm`" ]; then
#     eval "$(npm completion -)"
# fi

# grunt
# if [ -n "`which grunt`" ]; then
#     eval "$(grunt --completion=bash)"
# fi

# ========================================
# Per-machine extras
# ========================================
if [ -e ~/.bash_local ]; then
	. ~/.bash_local
fi
