#  -*- mode: unix-shell-script; -*-

# ========================================
# Path settings
# ========================================

# Add developer bin
if [ -d ~/Developer/bin ]; then
	export PATH=~/Developer/bin:${PATH}
fi


# Add home bin dir if it is there
if [ -d ~/.bin ]; then
	export PATH=~/.bin:${PATH}
fi

# ========================================
# Shell preferences
# ========================================

# Editor
if [ -e /usr/local/bin/bbedit ]; then
    # bbedit
    export GIT_EDITOR="bbedit -w"
    export SVN_EDITOR="bbedit -w"
    export EDITOR="bbedit -w"
    export VISUAL="bbedit"
    export LESSEDIT='bbedit -l %lm %f'
    export TEXEDIT='bbedit -w -l %d "%s"'
else
    # vim
    export EDITOR="mvim"
    export GIT_EDITOR="${EDITOR} --nofork"
    export SVN_EDITOR="${EDITOR} --nofork"
    export VISUAL="mvim"
    export LESSEDIT='vim ?lm+%lm. %f'
    export TEXEDIT='vim +%d %s'
fi

# less
export PAGER=less
export LESS="--status-column --long-prompt --no-init --quit-if-one-screen --quit-at-eof -R"

# Command history
# bind '"[A":history-search-backward'
# bind '"[B":history-search-forward'

# ========================================
# Languages/frameworks
# ========================================

# Homebrew
export HOMEBREW_NO_EMOJI=1

# Go
if [ -d /usr/local/go ]; then
	export GOROOT=/usr/local/go
fi

if [ -d ~/.go ]; then
	export GOPATH=~/.go
	export PATH=$PATH:$GOROOT/bin:${GOPATH//://bin:}/bin
fi

if [ -d ~/.gows ]; then
    source ~/.gows/gows
fi

# Ruby (rbenv)
if [ -d ~/.rbenv ]; then
	export PATH=~/.rbenv/bin:${PATH}
	eval "$(rbenv init -)"
fi

# Add local bin directory for Ruby/Bundler
export PATH=./bin:${PATH}

# Python
export WORKON_HOME=$HOME/.virtualenvs
if [ -s /usr/local/bin/virtualenvwrapper.sh ]; then
  . /usr/local/bin/virtualenvwrapper.sh
fi

# Java
if [[ -e /usr/libexec/java_home ]]; then
	# Verify that java is installed
	/usr/libexec/java_home > /dev/null 2>&1
	if [[ $? -eq 0 ]]; then
		# Java installed - use the default JDK
		export JAVA_HOME=`/usr/libexec/java_home`
	fi
else
    export JAVA_HOME=$(readlink -f `which java` | sed "s:bin/java::")
fi

# Android
export ANDROID_HOME=~/Developer/Library/Android
export ANDROID_SDK=${ANDROID_HOME}/adt-bundle-mac-x86_64/sdk
export ANDROID_NDK=${ANDROID_HOME}/android-ndk-r8d
export PATH=${PATH}:${ANDROID_SDK}/tools:${ANDROID_SDK}/platform-tools

# Node
export NODE_PATH=/usr/local/lib/node_modules

# Go
export GOROOT=/usr/local/go
export PATH=$PATH:$GOROOT/bin

# Perforce
export P4DIFF=/usr/local/bin/ksdiff
export P4MERGE=/usr/local/bin/ksdiff

# AWS
if [ -d ~/Developer/Library/AWS ]; then
	export AWS_HOME=~/Developer/Library/AWS

	# Setup EB
	if [ -d ${AWS_HOME}/AWS-ElasticBeanstalk-CLI-2.4.0 ]; then
		export AWS_EB_HOME=${AWS_HOME}/AWS-ElasticBeanstalk-CLI-2.4.0

		case $(uname) in
		Darwin )
			platform="macosx"
			;;
		Linux )
			platform="linux"
			;;
		* )
			platform="unknown"
		esac

		if [ $platform != "unknown" ]; then
			case $(python --version 2>&1) in
				*2.7* )
					pyver="python2.7"
					;;
				*3* )
					pyver="python3"
					;;
				* )
					pyver="unknown"
			esac

			if [ $pyver != "unknown" ]; then
				export PATH=$PATH:${AWS_EB_HOME}/eb/${platform}/${pyver}
			fi
		fi
	fi
fi

# ========================================
# Applications/services
# ========================================

# Postgres openssl breaks Ruby build
# Disable it off the path for now ...
export POSTGRES_APP_ROOT=/Applications/Postgres.app/Contents/MacOS
#if [ -d ${POSTGRES_APP_ROOT} ]; then
#    export PATH=${POSTGRES_APP_ROOT}/bin:${PATH}
#fi

# Heroku Toolbelt
if [ -d /usr/local/heroku ]; then
	export PATH="/usr/local/heroku/bin:$PATH"
fi

# ========================================
# Shell functions
# ========================================

# Open gem doc page
gemdoc() {
    open "http://localhost:8808/rdoc?q=$1"
}

# Open man page with default x-man handler
# On Mac OS X, opens a nice terminal window
manx() {
   open x-man-page://${1}
}

# Switch to project home
project() {
    cd ~/Developer/Projects/${1}
}

# Open URL source in BBEdit
bbcurl() {
    curl $1 | bbedit --new-window +1 -t $1
}

# ========================================
# Terminal settings
# ========================================

# Colors
COLOR_CLEAR="\[\033[0m\]"
COLOR_BLACK="\[\033[0;30m\]"
COLOR_RED="\[\033[0;31m\]"
COLOR_GREEN="\[\033[0;32m\]"
COLOR_YELLOW="\[\033[0;33m\]"
COLOR_BLUE="\[\033[0;34m\]"
COLOR_MAGENTA="\[\033[0;35m\]"
COLOR_CYAN="\[\033[0;36m\]"
COLOR_WHITE="\[\033[0;37m\]"

COLOR_BOLD_BLACK="\[\033[1;30m\]"
COLOR_BOLD_RED="\[\033[1;31m\]"
COLOR_BOLD_GREEN="\[\033[1;32m\]"
COLOR_BOLD_YELLOW="\[\033[1;33m\]"
COLOR_BOLD_BLUE="\[\033[1;34m\]"
COLOR_BOLD_MAGENTA="\[\033[1;35m\]"
COLOR_BOLD_CYAN="\[\033[1;36m\]"
COLOR_BOLD_WHITE="\[\e[1;37m\]"

COLOR_BACKGROUND_BLACK="\[\033[40m\]"
COLOR_BACKGROUND_RED="\[\033[41m\]"
COLOR_BACKGROUND_GREEN="\[\033[42m\]"
COLOR_BACKGROUND_YELLOW="\[\033[43m\]"
COLOR_BACKGROUND_BLUE="\[\033[44m\]"
COLOR_BACKGROUND_MAGENTA="\[\033[45m\]"
COLOR_BACKGROUND_CYAN="\[\033[46m\]"
COLOR_BACKGROUND_WHITE="\[\033[47m\]"

# Set Git PS conditions
export GIT_PS1_SHOWDIRTYSTATE=1
export GIT_PS1_SHOWSTASHSTATE=1
export GIT_PS1_SHOWUNTRACKEDFILES=1
export GIT_PS1_SHOWUPSTREAM="auto"
export GIT_PS1_SHOWCOLORHINTS=1
source ~/.git-prompt.sh

# Prompt
declare +x PS1

export PROMPT_DIRTRIM=3

if [ $TERM = "xterm-256color" -o $TERM = "xterm-color" -o $TERM = "dtterm" -o $TERM = "linux" ]; then
  export CLICOLOR=1
  PS1='\w$(__git_ps1 " (%s)")\$ '
else
  PS1='\w$(__git_ps1 " (%s)")\$ '
fi

if which dircolors &>/dev/null; then
    if [ -e ~/.dircolors ]; then
        eval `dircolors ~/.dircolors`
    fi
else
    # Set directory colors
    # man ls -> find LSCOLORS

    # Default (light terminal)
    # export LSCOLORS=exfxcxdxbxegedabagacad

    # Dark terminal
    export LSCOLORS=gxfxcxdxbxegedabagacad

    # Daring Fireball terminal
    # export LSCOLORS=CxGxcxdxBxegedabagacad
fi

# ========================================
# Aliases
# ========================================
if [ -e ~/.aliases ]; then
	. ~/.aliases
fi

# ========================================
# Bash completions
# ========================================

# Homebrew - will also call user's ~/.bash_completion too
if [ -n "`which brew`" ]; then
    if [ -f `brew --prefix`/etc/bash_completion ]; then
        . `brew --prefix`/etc/bash_completion
    fi
    
    if [ -f `brew --prefix`/Library/Contributions/brew_bash_completion.sh ]; then
        source `brew --prefix`/Library/Contributions/brew_bash_completion.sh
    fi
    
    if [ -e `brew --prefix`/bin/aws_completer ]; then
	    complete -C aws_completer aws
    fi
fi

if [ -e ~/.bash_completion ]; then
    . ~/.bash_completion
fi

# Pip
if [ -n "`which pip`" ]; then
	eval "`pip completion --bash`"
fi

# npm
if [ -n "`which npm`" ]; then
    eval "$(npm completion -)"
fi

# grunt
if [ -n "`which grunt`" ]; then
    eval "$(grunt --completion=bash)"
fi

# ========================================
# Per-machine extras
# ========================================
if [ -e ~/.bash_local/bashrc ]; then
	. ~/.bash_local/bashrc
fi
