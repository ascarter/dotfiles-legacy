[color]
    ui = auto
[core]
    excludesfile = ~/.gitignore
    autocrlf = input
[instaweb]
    httpd = webrick
[merge]
    prompt = false
    renormalize = true
    keepBackup = true
[pack]
    threads = 0
[pull]
	rebase = true
[difftool]
    prompt = false
[difftool "bbdiff"]
    cmd = /usr/local/bin/bbdiff --wait --resume "$LOCAL" "$REMOTE"
[difftool "Kaleidoscope"]
    cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[mergetool "Kaleidoscope"]
    cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
    trustExitCode = true
[url "git@github.com:"]
    pushInsteadOf = https://github.com
[alias]
	aliases = !git config -l | grep alias | cut -c 7-
	amend = commit --amend
	bbdiff = difftool --tool=bbdiff
	begin = cob
	blocal = rev-parse --abbrev-ref HEAD
	br = branch
	bremote = rev-parse --abbrev-ref --symbolic-full-name @{u}
	changelog = log --oneline --decorate --no-merges
	changes = diff --name-status -r
	ci = commit
	ciu = commitup
	cleanup = !git checkout master && git branch --merged | grep -v " master" | xargs git branch -d
	co = checkout
	cob = checkout -b
	commitup = "!f() { local msg=${1-'WIP'}; git commit -a -m \"${msg}\"; git up; git push origin; }; f"
	cont = "!f() { git up; echo "Create new branch ${1}"; git begin ${1} origin/${1}; }; f"
	ctags = '!${PWD}/.git/hooks/ctags'
	datetag = !git tag `date \"+%Y%m%d%H%M\"`
	difflast = diff HEAD^ HEAD
	diffstat = diff --stat -r
	dir = rev-parse --show-toplevel
	dirty = status --untracked-files=no --porcelain
	discard = checkout -- 
	done = "!f() { local branch=${1-$(git blocal)}; git checkout master; git up; git cleanup; git branch -d ${branch}; }; f"
	dump = cat-file -p
	gdiff = difftool --gui --no-prompt
	gitkconflict = !gitk --left-right HEAD...MERGE_HEAD
	hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	hub = !sh -c 'github'
	k = !gitk
	last = log -l HEAD -n 1
	ll = log --pretty=format:\"%C(yellow)%h %C(green)%ad %cn %Cred%d %Creset%s\" --decorate --numstat --date=short
	llog = log --date=local
	logb = log master..HEAD --pretty=oneline 
	logd = log -- .
	logx = log --graph --decorate --all --oneline
	ls = log --pretty=format:\"%C(yellow)%h %C(green)%ad%Cred%d %Creset%s\" --decorate --date=relative
	pr = pull-request --browse
	prep = rebase -i @{upstream}
	setemail = !git config user.email
	sha = rev-parse --verify HEAD
	ship = merge --no-ff
	st = status
	tower = "!gittower $(P=$(pwd); while [[ \"$P\" != \"\" && ! -e \"$P/.git\" ]]; do P=${P%/*}; done; echo \"$P\")"
	type = cat-file -t
	unstage = reset HEAD --
	untrack = rm --cache --
	up = "!f() { if [ \"$(git dirty)\" != \"\" ]; then git upd; else git upc; fi; }; f"
	upc = pull --rebase --prune
	upd = !git stash && git upc && git stash pop
	upstream = !git branch -vv --list $(git blocal)
	visual = "!gittower $(P=$(pwd); while [[ \"$P\" != \"\" && ! -e \"$P/.git\" ]]; do P=${P%/*}; done; echo \"$P\")"
	whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
	who = shortlog -s --
	whois = !sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -
	x = !gitx
