# code zsh prompt theme
# Andrew Carter <ascarter@uw.edu>
#
# Coding minimal vcs prompt
#

prompt_code_help () {
  cat <<'EOH'
Coding prompt with minimal vcs info
EOH
}

prompt_code_setup () {
  zparseopts -D -E -F -dirty=dirty -stashed=stashed -upstream=upstream -untracked=untracked -debug=debug

  # Visual tokens
  if [[ "$TERM" = "xterm-256color" ]]; then
    SEPARATOR=" ➜ "
    GIT_DIRTY="±"
    GIT_STAGED="●"
    GIT_UNSTAGED="✚"
    GIT_UNTRACKED="…"
    GIT_EQUAL="≡"
    GIT_AHEAD="↑"
    GIT_BEHIND="↓"
    GIT_DIVERGED="✖"
    GIT_NOUPSTREAM="-"
    GIT_STASHED="⚑"
  else
    SEPARATOR=" | "
    GIT_DIRTY="x"
    GIT_STAGED="*"
    GIT_UNSTAGED="+"
    GIT_UNTRACKED="?"
    GIT_EQUAL="="
    GIT_AHEAD=">"
    GIT_BEHIND="<"
    GIT_DIVERGED="<>"
    GIT_NOUPSTREAM="-"
    GIT_STASHED="#"
  fi

  # Ensure vcs_info is available
  if [[ $(whence -w 'vcs_info' | cut -d ':' -f 2 | xargs) == function ]]; then
    # Prompt: user@host ~/path vcs_info %
    PROMPT='%F{2}%B%n@%m%b%f${SEPARATOR}%F{4}%B%~%b%f${vcs_info_msg_0_} %# '
    PROMPT4='+%N:%i:%_>'
    prompt_opts=( cr percent subst sp )

    # Hooks

    +vi-upstream() {
      # Get count upstream downstream
      local count=$(git rev-list --count --left-right @{upstream}...HEAD 2>/dev/null)
      case "$count" in
      "")
        # no upstream
        hook_com[misc]+=$GIT_NOUPSTREAM ;;
      "0	0")
        # equal to upstream
        hook_com[misc]+=$GIT_EQUAL ;;
      "0	"*)
        # ahead of upstream
        hook_com[misc]=$GIT_AHEAD ;;
      *"	0")
        # behind upstream
        hook_com[misc]+=$GIT_BEHIND ;;
      *)
        # diverged from upstream
        hook_com[misc]+=$GIT_DIVERGED ;;
      esac
    }

    +vi-untracked() {
      [[ -n $(git ls-files --others --exclude-standard) ]] && hook_com[unstaged]+=$GIT_UNTRACKED
    }

    +vi-stashed() {
      git rev-parse --verify refs/stash >/dev/null 2>&1 && hook_com[misc]+=$GIT_STASHED
    }

    +vi-dirty() {
      if [[ -n $hook_com[staged] || -n $hook_com[unstaged] ]]; then
        hook_com[staged]=$GIT_DIRTY
        hook_com[unstaged]=""
      fi
    }

    # Set enabled hooks
    hooks=()
    [[ -n $upstream ]] && hooks+=('upstream')
    [[ -n $untracked ]] && hooks+=('untracked')
    [[ -n $stashed ]] && hooks+=('stashed')
    [[ -n $dirty ]] && hooks+=('dirty')

    zstyle ':vcs_info:*' enable git
    zstyle ':vcs_info:git:*' check-for-changes true
    zstyle ':vcs_info:git:*' stagedstr $GIT_STAGED
    zstyle ':vcs_info:git:*' unstagedstr $GIT_UNSTAGED
    zstyle ':vcs_info:git:*' formats " %F{6}(%f%F{1}%b%f %F{3}%m%c%u%f%F{6})%f"
    zstyle ':vcs_info:git:*' actionformats " %F{6}(%f%F{1}%b%f %F{3}%m%c%u%f%F{6}|%F{9}%B%a%b%f)%f"
    zstyle ':vcs_info:git*+set-message:*' hooks $hooks

    # Show debug information for vcs_info
    [[ -n $debug ]] && zstyle ':vcs_info:*' debug true

    terminal_title() {
      # Update terminal title
      case $(uname) in (Linux) print -Pn "\e]0;%n@%m: %1~\a"; esac
    }

    precmd() {
      vcs_info
      terminal_title
    }
  fi
}

prompt_code_setup "$@"
