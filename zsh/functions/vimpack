emulate -L zsh

_vimpack_is_git_clean() {
  # Fail if any changes pending since vimpack adds and removes directly from Git
  if [[ -n $(git -C $DOTFILES status -s -uno) ]]; then
    print "$DOTFILES has modified files - aborting"
    return 1
  fi
}

_vimpack_list() {
  git -C $DOTFILES submodule | grep "vim/pack"
}

_vimpack_update() {
  git -C $DOTFILES submodule update --init --remote --merge
  git -C $DOTFILES commit -m "Updated vim packages"
}

_vimpack_add() {
  local pack=$1
  local dest=$2
  local repo="https://github.com/${pack}.git"

  git -C $DOTFILES submodule add $repo $dest
  git -C $DOTFILES add .gitmodules $dest
  git -C $DOTFILES commit -m "Add vim package ${pack}"
}

_vimpack_remove() {
  local dest=$1
  git -C $DOTFILES submodule deinit $dest
  git -C $DOTFILES rm $dest
  rm -Rf $DOTFILES/$dest
  git -C $DOTFILES commit -m "Remove vim package $dest"
}

vimpack() {
  typeset color
  typeset opt

  local usage="$(tput bold)$0$(tput sgr0) -- Manage Vim native packages via git submodules

  $0 [--color] [--opt] add [pack]
  $0 [--color] [--opt] remove [pack]
  $0 list
  $0 update
  $0 help

$(tput bold)pack$(tput sgr0) must be short for $(tput bold)https://github.com/<pack>$(tput sgr0) where $(tput bold)pack=<owner>/<repo>$(tput sgr0)

Examples:
  $0 --color add ascarter/vim-rain
  $0 add editorconfig/editorconfig-vim
  $0 --opt tpope/vim-commentary
  $0 remove fatih/vim-go
"

  zparseopts -D -E -F -color=color -opt=opt -help=help
  color=${#color}
  opt=${#opt}
  help=${#help}

  local cmd=${1}

  # Show help
  [ ${help} = "1" ] && cmd="help"

  case ${cmd} in
  list|'')
    _vimpack_list ;;
  update)
    _vimpack_is_git_clean && _vimpack_update ;;
  add|remove)
    local pack=${2}
    if [ -z "$pack" ]; then
      print "$usage"
      return 1
    fi

    local packtype
    local loadtype

    if [ $color = "1" ]; then
      packtype=colors
    else
      packtype=plugins
    fi

    if [ $opt = "1" ]; then
      loadtype=opt
    else
      loadtype=start
    fi

    local dest=vim/pack/${packtype}/${loadtype}/$(basename ${pack})

    case $cmd in
    add)
      _vimpack_is_git_clean && _vimpack_add $pack $dest ;;
    remove)
      _vimpack_is_git_clean && _vimpack_remove $dest ;;
    esac
    ;;
  *)
    ! [ "${cmd}" = "help" ] && print "Invalid command ${cmd}"
    print "$usage"
    return 1
    ;;
  esac
}

vimpack "$@"
