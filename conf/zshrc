fpath=(${DOTFILES}/zsh/functions ${DOTFILES}/zsh/prompts ${DOTFILES}/zsh/completions $fpath)

# Check for homebrew
if [ -d ${HOMEBREW_PREFIX} ]; then
  fpath+=(${HOMEBREW_PREFIX}/share/zsh/site-functions ${HOMEBREW_PREFIX}/share/zsh-completions)
fi

autoload -Uz compinit
compinit -u

autoload -U promptinit
promptinit

autoload -U colors
colors

autoload -U ${DOTFILES}/zsh/functions/[^_]*(:t)
autoload add-zsh-hook

# Support bash completions
autoload bashcompinit
bashcompinit

# Enable vcs info
autoload -Uz vcs_info

# ===========
# Prompt
# ===========

# Default: PS1="%m%# "
declare +x PS1
prompt vscode

# ========================================
# Shell preferences
# ========================================

# Retain history across multiple zsh sessions
HISTFILE=${ZDOTDIR:-$HOME}/.zsh_history
setopt SHARE_HISTORY
setopt APPEND_HISTORY
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_DUPS
setopt HIST_FIND_NO_DUPS
setopt HIST_REDUCE_BLANKS
SAVEHIST=5000
HISTSIZE=2000

# Key mappings

# Emacs key mappings
bindkey -e

# Forward delete
bindkey "^[[3~" delete-char

# Editor
export EDITOR="vim"
export VISUAL="vim -g"
export LESSEDIT='vim ?lm+%lm. %f'
export TEXEDIT='vim +%d %s'

# less
export PAGER="less -r"
export LESS="--status-column --long-prompt --no-init --quit-if-one-screen --quit-at-eof -R"

# ========================================
# Developer Tools
# ========================================

# Generate user's global gitconfig
if ! [ -f ${HOME}/.gitconfig ]; then
  gitconfig ${DOTFILES} ${HOME}/.gitconfig
fi

# Ruby
if (( $+commands[ruby] )) && (( $+commands[gem] )); then
  path+=$(ruby -r rubygems -e 'puts Gem.user_dir')/bin
fi

# rbenv
if (( $+commands[rbenv] )); then
  eval "$(rbenv init - zsh)"
fi

# Python
case $(uname) in
Darwin )
  # Installed Python
  path+=/Library/Frameworks/Python.framework/Versions/Current/bin

  # User pip installed binaries are in ~/Library on macOS
  local pyver=$(python3 -c "import sys; print ('{}.{}'.format(sys.version_info.major, sys.version_info.minor))")
  if [[ -d ${HOME}/Library/Python/${pyver} ]]; then
      export LC_ALL=en_US.UTF-8
      export LANG=en_US.UTF-8
      path+=${HOME}/Library/Python/${pyver}/bin
  fi
esac

# User pip installed binaries are in ~/.local/bin on Linux
if [[ -d ${HOME}/.local/bin ]]; then
    path+=${HOME}/.local/bin
fi

# Pipx
if (( $+commands[pipx] )); then
  eval "$(register-python-argcomplete pipx)"
fi

# Android
if [[ -d ${HOME}/Library/Android/sdk ]]; then
  export ANDROID_HOME=${HOME}/Library/Android/sdk
  path+=(${ANDROID_HOME}/tools ${ANDROID_HOME}/tools/bin ${ANDROID_HOME}/platform-tools)
fi

# Kubernetes (microk8s)
if (( $+commands[microk8s.kubectl] )); then
  compdef microk8s.kubectl=kubectl
fi

# ========================================
# Aliases
# ========================================

if [ -f ${DOTFILES}/zsh/zsh_aliases ]; then
  source ${DOTFILES}/zsh/zsh_aliases
fi

# ========================================
# Path settings
# ========================================

# Add home bin dir if it is there
path+=${DOTFILES}/bin

# ========================================
# SSH
# ========================================

# Use 1Password SSH Agent if installed
if [ -S ${HOME}/.1password/agent.sock ]; then
  export SSH_AUTH_SOCK=${HOME}/.1password/agent.sock
else
  case $(uname) in
  Linux )
    # WSL - use named pipe to Windows host ssh-agent
    if [ -n "${WSL_DISTRO_NAME}" ] && type npiperelay.exe &>/dev/null; then
      export SSH_AUTH_SOCK=${HOME}/.ssh/agent.sock
      ss -a | grep -q $SSH_AUTH_SOCK
      if [ $? -ne 0 ]; then
        rm -f ${SSH_AUTH_SOCK}
        ( setsid socat UNIX-LISTEN:${SSH_AUTH_SOCK},fork EXEC:"npiperelay.exe -ei -s //./pipe/openssh-ssh-agent",nofork & ) >/dev/null 2>&1
      fi
    elif (( $+commands[keychain] )); then
      # Use keychain if installed
      eval `keychain --eval --agents ssh id_rsa id_ed25519`
    fi
    ;;
  esac
fi

# ========================================
# 1Password
# ========================================

if [ -f ${HOME}/.op/plugins.sh ]; then
  source ${HOME}/.config/op/plugins.sh
fi

# ========================================
# Per-machine extras
# ========================================
[[ -e ${HOME}/.zsh_local ]] && source ${HOME}/.zsh_local


# ========================================
# Banners and messages
# ========================================

case $(uname) in
Linux )
  if [ -x "$(command -v show-motd)" ] && show-motd login
  ;;
esac
