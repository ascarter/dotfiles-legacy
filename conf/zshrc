#  -*- mode: shellscript; -*-

fpath=(${ZDOTDIR:-$DOTFILES/zsh}/completions ${ZDOTDIR:-$DOTFILES/zsh}/functions ${ZDOTDIR:-$DOTFILES/zsh}/prompts $fpath)

# Homebrew
HOMEBREW_PREFIX=/opt/homebrew
if [ -e ${HOMEBREW_PREFIX}/bin/brew ]; then
	export HOMEBREW_NO_EMOJI=1
	export HOMEBREW_NO_ANALYTICS=1
	eval $(${HOMEBREW_PREFIX}/bin/brew shellenv)
	fpath+=($(brew --prefix)/share/zsh/site-functions $(brew --prefix)/share/zsh-completions)
fi

autoload -Uz compinit
compinit -u

autoload -U promptinit
promptinit

autoload -U colors
colors

autoload -U ${ZDOTDIR:-$DOTFILES/zsh}/functions/[^_]*(:t)
autoload add-zsh-hook

# Support bash completions
autoload bashcompinit
bashcompinit

# Enable vcs info
autoload -Uz vcs_info

# ===========
# Prompt
# ===========

# Default: PS1="%m%# "
declare +x PS1
prompt vcs

# ========================================
# Shell preferences
# ========================================

# Retain history across multiple zsh sessions
HISTFILE=${ZDOTDIR:-$HOME}/.zsh_history
setopt SHARE_HISTORY
setopt APPEND_HISTORY
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_DUPS
setopt HIST_FIND_NO_DUPS
setopt HIST_REDUCE_BLANKS
SAVEHIST=5000
HISTSIZE=2000

# Key mappings

# Emacs key mappings
bindkey -e

# Forward delete
bindkey "^[[3~" delete-char

# Editor
export EDITOR="vim"
export VISUAL="vim -g"
export LESSEDIT='vim ?lm+%lm. %f'
export TEXEDIT='vim +%d %s'

# less
export PAGER=less
export LESS="--status-column --long-prompt --no-init --quit-if-one-screen --quit-at-eof -R"

# ========================================
# Developer Tools
# ========================================

# SDK root for custom installs
export SDK_ROOT=${HOME}/sdk

# GitHub
if [ -x "$(command -v gh)" ]; then
	eval "$(gh completion -s zsh)"
fi

# Ruby
if [ -x "$(command -v ruby)" ] && [ -x "$(command -v gem)" ]; then
	export PATH=$(ruby -r rubygems -e 'puts Gem.user_dir')/bin:$PATH
fi

# Python
if [[ -d /Library/Frameworks/Python.framework/Versions/3.8 ]]; then
	export PATH=/Library/Frameworks/Python.framework/Versions/3.8/bin:${PATH}
fi
if [[ -d ${HOME}/Library/Python/3.8 ]]; then
	export LC_ALL=en_US.UTF-8
	export LANG=en_US.UTF-8
	export PATH=${HOME}/Library/Python/3.8/bin:${PATH}
fi
if [ -x "$(command -v pip3)" ]; then
	source <(pip3 completion --zsh)
	compctl -K _pip_completion pip3
fi
if [[ -d ${HOME}/Library/Python/2.7 ]]; then
	export PATH=${HOME}/Library/Python/2.7/bin:${PATH}
fi

# Go
if [ -d ${SDK_ROOT} ]; then
	# Check for downloaded go versions and use the latest one
	export GOROOT=${SDK_ROOT}/$(ls -r ${SDK_ROOT} | grep go1 | head -1)
	export PATH=${GOROOT}/bin:${PATH}
fi

# Add GOPATH to installed binaries to path
if [ -x "$(command -v go)" ]; then
	export PATH=$(go env GOPATH)/bin:${PATH}
fi

# .NET Core
if [ -x "$(command -v dotnet)" ]; then
	# Disable telemtry
	DOTNET_CLI_TELEMETRY_OPTOUT=1

	# zsh parameter completion for the dotnet CLI
	_dotnet_zsh_complete() {
		local completions=("$(dotnet complete "$words")")
		reply=( "${(ps:\n:)completions}" )
	}
	compctl -K _dotnet_zsh_complete dotnet
fi

# Java
if [[ -e /usr/libexec/java_home ]]; then
	# Verify that java is installed
	/usr/libexec/java_home > /dev/null 2>&1
	if [[ $? -eq 0 ]]; then
		# Java installed - use the default JDK
		export JAVA_HOME=`/usr/libexec/java_home`
	fi
else
	export JAVA_HOME=$(readlink -f `whence -cp java` | sed "s:bin/java::")
fi

# Android
if [[ -d ${HOME}/Library/Android/sdk ]]; then
	export ANDROID_HOME=${HOME}/Library/Android/sdk
	export PATH=${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools:${PATH}
fi

# Rust
if [[ -d ${HOME}/.cargo ]]; then
	source ${HOME}/.cargo/env
fi

# Kubernetes
if [ -x "$(command -v kubectl)" ]; then
	source <(kubectl completion zsh)
fi

# AWS
if [ -x "$(command -v aws_zsh_completer.sh)" ]; then
	source `whence -cp aws_zsh_completer.sh`
fi

# ========================================
# Aliases
# ========================================

if [ -f ${ZDOTDIR:-$DOTFILES/zsh}/zsh_aliases ]; then
    source ${ZDOTDIR:-$DOTFILES/zsh}/zsh_aliases
fi

# ========================================
# Path settings
# ========================================

# Add home bin dir if it is there
if [[ -d ${DOTFILES}/bin ]]; then
	export PATH=${DOTFILES}/bin:${PATH}
fi

# ========================================
# SSH
# ========================================

case $(uname) in
Linux )
	if [ -n "${WSL_DISTRO_NAME}" ] && type npiperelay.exe &>/dev/null; then
		# Used named pipe to Windows host ssh-agent
		export SSH_AUTH_SOCK=${HOME}/.ssh/agent.sock
		ss -a | grep -q $SSH_AUTH_SOCK
		if [ $? -ne 0 ]; then
			rm -f ${SSH_AUTH_SOCK}
			( setsid socat UNIX-LISTEN:${SSH_AUTH_SOCK},fork EXEC:"npiperelay.exe -ei -s //./pipe/openssh-ssh-agent",nofork & ) >/dev/null 2>&1
		fi
	else
		# Use keychain if installed
		if [ -x "$(command -v keychain)" ]; then
			eval `keychain --eval --agents ssh id_rsa id_ed25519`
		fi
	fi
	;;
esac

# ========================================
# Per-machine extras
# ========================================
[[ -e ${HOME}/.zsh_local ]] && source ${HOME}/.zsh_local


# ========================================
# Banners and messages
# ========================================

case $(uname) in
Linux )
	show-motd login
	;;
esac
