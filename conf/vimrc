" vimrc
" Multi-platform vimrc for software development
"
" Author: Andrew Carter <ascarter@uw.edu>
" MIT License

set nocompatible
filetype off
let mapleader=","
set backspace=indent,eol,start

" =====================================
" Plugins
" =====================================

" Enable extend % matching
runtime macros/matchit.vim

" Enable vim-plug
if has("win32")
    if empty(glob('~\vimfiles\autoload\plug.vim'))
        silent !curl -fLo \%USERPROFILE\%\\vimfiles\\autoload\\plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
    call plug#begin('~/vimfiles/bundle')
else
    if empty(glob('~/.vim/autoload/plug.vim'))
        silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
    call plug#begin('~/.vim/bundle')
endif

" Plugins
Plug 'editorconfig/editorconfig-vim'
Plug 'fatih/vim-go'
Plug 'itchyny/lightline.vim'
Plug 'lifepillar/pgsql.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'

" Disabled plugins
"Plug 'dense-analysis/ale'

" Color schemes
Plug 'arcticicestudio/nord-vim'
Plug 'ascarter/vim-rain'
Plug 'cocopon/iceberg.vim'
Plug 'Lokaltog/vim-monotone'
Plug 'sonph/onehalf', { 'rtp': 'vim' }

call plug#end()

" Plugin upgrade
command! PU PlugUpdate | PlugUpgrade

" =====================================
" UI
" =====================================

" Color scheme
if has("termguicolors")
    " Windows 10 terminal
    if has("vcon")
        set termguicolors
    endif
endif

set background=dark
try
    colorscheme onehalfdark
    let g:lightline = { 'colorscheme': 'onehalfdark' }
catch
    colorscheme default
endtry

"let g:lightline = { 'colorscheme': 'PaperColor' }
"let g:monotone_contrast_factor=0.9
"colorscheme monotone


"colorscheme iceberg
"let g:lightline = { 'colorscheme': 'iceberg' }

"colorscheme nord
"let g:nord_bold_vertical_split_line = 1
"let g:nord_italic = 1
"let g:nord_italic_comments = 1
"let g:lightline = { 'colorscheme': 'nord' }

"colorscheme rain

" Customize monotone
"hi Normal       guibg=#22272e  ctermbg=None
"hi Function     guifg=NONE     guibg=NONE  gui=bold,italic  ctermfg=NONE  ctermbg=NONE  cterm=bold,italic
"hi Identifier   guifg=NONE     guibg=NONE  gui=italic       ctermfg=NONE  ctermbg=NONE  cterm=italic
"hi Include      guifg=NONE     guibg=NONE  gui=italic       ctermfg=NONE  ctermbg=NONE  cterm=italic
"hi Keyword      guifg=NONE     guibg=NONE  gui=bold         ctermfg=NONE  ctermbg=NONE  cterm=bold
"hi Question     guifg=NONE     guibg=NONE  gui=NONE         ctermfg=NONE  ctermbg=NONE  cterm=NONE
"hi Statement    guifg=NONE     guibg=NONE  gui=bold         ctermfg=NONE  ctermbg=NONE  cterm=bold
"hi Type         guifg=NONE     guibg=NONE  gui=bold         ctermfg=NONE  ctermbg=NONE  cterm=bold
"hi Underlined   guifg=NONE     guibg=NONE  gui=underline    ctermfg=NONE  ctermbg=NONE  cterm=underline
"hi Title        guifg=NONE     guibg=NONE  gui=bold         ctermfg=NONE  ctermbg=NONE  cterm=bold

" Flash screen only - no beep
set visualbell

" Show line numbers
set number

" Cursor shape
" 1 -> blinking block
" 2 -> solid block
" 3 -> blinking underscore
" 4 -> solid underscore
" 5 -> blinking vertical bar
" 6 -> solid vertical bar
let &t_SI = "\e[5 q"  "SI=INSERT mode
let &t_SR = "\e[4 q"  "SR=REPLACE mode
let &t_EI = "\e[1 q"  "EI=NORMAL mode

" Set fill characters
set fillchars=vert:\ ,fold:-

" Enable italics in macos terminal
if has('macunix')
    let &t_ZH="\e[3m"
    let &t_ZR="\e[23m"
endif

" Status line
if has('statusline')
    " Mode is shown by lightline
    set noshowmode
    set laststatus=2
    " set statusline=%<%f%{tagbar#currenttag('[%s]\ ','')}\ %w%h%m%r%=%-14.(%l,%c%V%)\ %P
endif

set hidden
set cursorline
set modeline
set ruler
set title

" Searching
set showmatch
set incsearch
set hlsearch
set ignorecase
set smartcase

" Completion
set wildmenu
set wildmode=list:longest
set wildignore=*.o,*.obj,*~,*DS_Store*

" Folding
set foldenable
set foldmethod=syntax
" Default to expanded
set foldlevel=10
"set foldcolumn=1

" netrw
let g:netrw_banner = 0
let g:netrw_alto = &sb
let g:netrw_altv = &spr
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_preview = 1
let g:netrw_winsize=16
"let g:netrw_list_hide='.git,.DS_Store,.*\.swp$'
if isdirectory(".git")
  let g:netrw_list_hide = netrw_gitignore#Hide()
endif

" Window management

" Adjust viewports to the same size
map <Leader>= <C-w>=
imap <Leader>= <ESC> <C-w>=

" Tagbar
nmap <F8> :TagbarToggle<CR>

" =====================================
" Syntax and file types
" =====================================

set encoding=utf-8
syntax enable
filetype on
filetype plugin on
filetype indent on

" Whitespace
set nowrap
set autoindent

" Ensure word wrap does not split words
set linebreak

" Go
let g:go_fmt_command = "gofmt"

" Test if running in WSL
function! IsWSL()
    if has("unix") || has("linux")
        let lines = readfile("/proc/version")
        if lines[0] =~ "Microsoft"
            return 1
        endif
    endif
    return 0
endfunction

" =====================================
" Remap keys
" =====================================

" Adapted from mswin.vim to make Vim work more like a standard application
if has("unix") || has("linux")
    if has("clipboard")
        " Cut ctrl+x
        vnoremap <C-X> "+x

        " Copy ctrl+c
        vnoremap <C-C> "+y

        " Past ctrl+v
        map  <C-V> "+gP
        cmap <C-V> <C-R>+

        "vmap <C-c> "+yi
        "vmap <C-x> "+c
        "vmap <C-v> "+gP
        "imap <C-v> <ESC>"+gP
        "vmap <C-a> ggVg
    endif

    if has("gui")
        " Search ctrl+f
        noremap  <expr> <C-F> has("gui_running") ? ":promptfind\<CR>": "/"
        inoremap <expr> <C-F> has("gui_running") ? "\<C-\>\<C-O>:promptfind\<CR>": "\<C-\>\<C-O>/"
        cnoremap <expr> <C-F> has("gui_running") ? "\<C-\>\<C-C>:promptfind\<CR>": "\<C-\>\<C-O>/"

        " Replace dialog ctrl+h
        nnoremap <expr> <C-H> has("gui_running") ? ":promptrepl\<CR>" : "\<C-H>"
        inoremap <expr> <C-H> has("gui_running") ? "\<C-\>\<C-O>:promptrepl\<CR>" : "\<C-H>"
        cnoremap <expr> <C-H> has("gui_running") ? "\<C-\>\<C-C>:promptrepl\<CR>" : "\<C-H>"
    endif

    " Save ctrl+s
    noremap  <C-S> :update<CR>
    vnoremap <C-S> <C-C>:update<CR>
    inoremap <C-S> <ESC>:update<CR>gi

    " For ctrl+v to work, autoselect must be off
    if !has("unix")
        set guioptions-=a
    endif

    "Undo ctrl+z
    noremap <C-Z>  u
    inoremap <C-Z> <C-O>u

    " Redo ctrl+y
    noremap  <C-Y> <C-R>
    inoremap <C-Y> <C-O><C-R>

    " Select all ctrl+a
    noremap <C-A> gggH<C-O>G
    inoremap <C-A> <C-O>gg<C-O>gH<C-O>G
    cnoremap <C-A> <C-C>gggH<C-O>G
    onoremap <C-A> <C-C>gggH<C-O>G
    snoremap <C-A> <C-C>gggH<C-O>G
    xnoremap <C-A> <C-C>ggVG

    " Next window ctrl+tab
    noremap  <C-Tab> <C-W>w
    inoremap <C-Tab> <C-O><C-W>w
    cnoremap <C-Tab> <C-O><C-W>w
    onoremap <C-Tab> <C-O><C-W>w
endif

" =====================================
" GUI settings
" =====================================

if has("gui_running")
    if has("termguicolors")
        set termguicolors
    endif

    " Set standard starting window size
    if &diff
        set lines=40 columns=160
    else
        set lines=40 columns=100
    endif

    " Turn off toolbar
    set guioptions-=T

    " Turn on menus
    set guioptions+=m

    " Turn off blinking cursor
    " set guicursor+=n:blinkon0

    if has('gui_macvim')
        " macOS

        " Enable smooth scrolling
        set guioptions+=k

        " Enable transparency
        set transparency=2

        " set macthinstrokes
        set guifont=SF\ Mono\ Regular:h13,Menlo:h13
        let macvim_hig_shift_movement = 1
        au FocusLost * set transp=5
        au FocusGained * set transp=0

        " Typical Mac OS X keymappings
        " cmd-[ / cmd-] to increase/decrease indentation
        vmap <D-]> >gv
        vmap <D-[> <gv
        map <D-]> >>
        map <D-[> <<

        " cmd-<0...9> to switch tabs
        map  <D-0> 0gt
        imap <D-0> <Esc>0gt
        map  <D-1> 1gt
        imap <D-1> <Esc>1gt
        map  <D-2> 2gt
        imap <D-2> <Esc>2gt
        map  <D-3> 3gt
        imap <D-3> <Esc>3gt
        map  <D-4> 4gt
        imap <D-4> <Esc>4gt
        map  <D-5> 5gt
        imap <D-5> <Esc>5gt
        map  <D-6> 6gt
        imap <D-6> <Esc>6gt
        map  <D-7> 7gt
        imap <D-7> <Esc>7gt
        map  <D-8> 8gt
        imap <D-8> <Esc>8gt
        map  <D-9> 9gt
        imap <D-9> <Esc>9gt
    elseif IsWSL()
        " Linux on WSL
        set guifont=Monospace\ 14
    elseif has('gui_gtk2') || has('gui_gtk3')
        " Linux
        set guifont=Monospace\ 11

    elseif has('gui_win32')
        " Windows
        set guifont=Fira\ Code:h10,Roboto\ Mono:h10,Cascadia\ Code:h10,Source\ Code\ Pro:h10,Consolas:h10
        set renderoptions=type:directx
    endif
endif

